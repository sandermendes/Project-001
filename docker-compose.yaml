version: "3.7"

volumes:
  postgres-data:
  redis-cache:

networks:
  ################################
  ######## Microservices #########
  ################################
  graphql:
    name: graphql
  account:
    name: account
  # user:
  #   name: user

  ################################
  ########## Resources ###########
  ################################
  database:
    name: database
  cache:
    name: cache

services:
  ################################
  ######## Microservices #########
  ################################
  graphql:
    container_name: GraphQL_Main_Service
    build:
      context: .
      dockerfile: ./microservices/graphql/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - ${GRAPHQL_PUBLIC_SERVICE_PORT}:${GRAPHQL_PUBLIC_SERVICE_PORT}
    networks:
      - graphql
      - account
      - database
      - cache

  account:
    container_name: Account_Service
    build:
      context: .
      dockerfile: ./microservices/account/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    expose:
      - ${ACCOUNT_SERVICE_PORT}
    networks:
      - account
      # - user
      - database

  # Uncommented to generate User as a standalone service
  # user:
  #   container_name: User_Service
  #   build:
  #     context: .
  #     dockerfile: ./microservices/user/Dockerfile
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   expose:
  #     - ${USER_SERVICE_PORT}
  #   networks:
  #     - user
  #     - database

  account_auth:
    container_name: AccountAuthentication
    build:
      context: .
      dockerfile: ./frontend/accounts-auth/Dockerfile
    env_file:
      - .env
    ports:
      - 4050:4050
    networks:
      - graphql

  account_user:
    container_name: AccountUser
    build:
      context: .
      dockerfile: ./frontend/accounts-user/Dockerfile
    env_file:
      - .env
    ports:
      - 4000:4000
    networks:
      - graphql

  ################################
  ########## Resources ###########
  ################################
  postgres:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - database
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      # interval: 5s
      # timeout: 5s
      # retries: 5

  adminer:
    image: adminer
    restart: always
    networks:
      - database
    ports:
      - 8088:8080
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:7.0.11-alpine
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server
    volumes: 
      - redis-cache:/var/lib/redis/data
    networks:
      - cache

  rediscommander:
    image: rediscommander/redis-commander:latest
    restart: always
    env_file:
      - .env
    environment:
      - REDIS_HOSTS=Local:${CACHE_ADDRESS}
    networks:
      - cache
    ports:
      - 8081:8081
